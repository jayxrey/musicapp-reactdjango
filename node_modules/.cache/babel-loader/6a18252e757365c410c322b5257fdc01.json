{"ast":null,"code":"var _jsxFileName = \"/Users/jreyes/Desktop/musicapp/frontend/src/components/Modal.js\";\nimport React from \"react\"; // We would like to use a modal (small window) to show details of a task.\n\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from \"reactstrap\"; // We are creating and exporting the CustomModal class.\n// It will be imported in our App.js.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class CustomModal extends React.Component {\n  constructor(props) {\n    super(props); // The state object is initialized in the constructor.\n    // It can contain as many properties as you like.\n    // Here we define one property called activeItem.\n\n    this.handleChange = event => {\n      // An event has a target, thus, event.target gives us the event's DOM element, e.g.,\n      // <input name=\"description\" placeholder=\"Enter Todo description\" type=\"text\" class=\"form-control\" value=\"My Task\">.\n      // From that, we assign the variables name = \"description\" and value = \"My Task\".\n      let {\n        name,\n        value\n      } = event.target; // Recall the spread operator three dots ... , e.g.,\n      // var parts = ['two', 'three']; // [two\", \"three\"]\n      // var numbers = ['one', ...parts, 'four']; // [\"one\", \"two\", \"three\", \"four\"]\n      // ...this.state.activeItem spreads out the current task object, e.g.,\n      // {\"id\": 3, \"title\": \"My Task\", \"description\": \"Wash Dishes\", \"completed\": true}.\n      // [name]: value sets the name of the task to the new value the user entered\n      // (e.g., title to \"Another Task\" or description to \"Sweep floor\").\n\n      const activeItem = { ...this.state.activeItem,\n        [name]: value\n      }; // To change a value in the `state` object for rendering, use the `this.setState()`\n      // method. If you would not do so, the text shown to the user in the textbox, e.g.,\n      // for the title of the new task would not change.\n\n      this.setState({\n        activeItem\n      });\n    };\n\n    this.state = {\n      activeItem: this.props.activeItem\n    };\n  } // Whenver we enter changes into our form, e.g., for the title of our task,\n  // we want the change to be immediately detected. This is what happens when\n  // this function is called below with onChange={this.handleChange}.\n  // handleChange takes an event argument, i.e., a change in title, descripton,\n  // or checkbox.\n\n\n  // The `render()` method is the only required method in a class component.\n  // When called, it will render the page. You do not have to specifically\n  // call render() in your component. Rather, the stub code with the\n  // ReactDOM.render(...) in your index.js will do that for you.\n  // The following will render the modal for adding or editing a task.\n  render() {\n    // The modal has three properties: toggle, onSave, and activeItem.\n    // See App.js.\n    const {\n      toggle,\n      onSave\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: true,\n      toggle: toggle,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        toggle: toggle,\n        children: \" Artists Item \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"song\",\n              children: \"Song\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 16\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"song\",\n              value: this.state.activeItem.song // \"this\" refers to the current event. If there is a change,\n              // it will be passed to the handleChange function above.\n              ,\n              onChange: this.handleChange,\n              placeholder: \"Enter Song Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 16\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"artist\",\n              children: \"Artist\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 16\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"artist\",\n              value: this.state.activeItem.artist,\n              onChange: this.handleChange,\n              placeholder: \"Enter Artist\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 16\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"album\",\n              children: \"Album\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 16\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"Album\",\n              value: this.state.activeItem.album,\n              onChange: this.handleChange,\n              placeholder: \"Enter Album\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 18\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"genre\",\n              children: \"Genre\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 16\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"Genre\",\n              value: this.state.activeItem.genre,\n              onChange: this.handleChange,\n              placeholder: \"Enter Genre\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 18\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"year\",\n              children: \"Year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 16\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"number\",\n              name: \"year\",\n              value: this.state.activeItem.year,\n              onChange: this.handleChange,\n              placeholder: \"Enter Year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 18\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          color: \"success\",\n          onClick: () => onSave(this.state.activeItem),\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 8\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/jreyes/Desktop/musicapp/frontend/src/components/Modal.js"],"names":["React","Button","Modal","ModalHeader","ModalBody","ModalFooter","Form","FormGroup","Input","Label","CustomModal","Component","constructor","props","handleChange","event","name","value","target","activeItem","state","setState","render","toggle","onSave","song","artist","album","genre","year"],"mappings":"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","sourcesContent":["import React from \"react\";\n // We would like to use a modal (small window) to show details of a task.\n import {\n   Button,\n   Modal,\n   ModalHeader,\n   ModalBody,\n   ModalFooter,\n   Form,\n   FormGroup,\n   Input,\n   Label\n } from \"reactstrap\";\n\n // We are creating and exporting the CustomModal class.\n // It will be imported in our App.js.\n export default class CustomModal extends React.Component {\n   constructor(props) {\n     super(props);\n     // The state object is initialized in the constructor.\n     // It can contain as many properties as you like.\n     // Here we define one property called activeItem.\n     this.state = {\n       activeItem: this.props.activeItem\n     };\n   }\n\n   // Whenver we enter changes into our form, e.g., for the title of our task,\n   // we want the change to be immediately detected. This is what happens when\n   // this function is called below with onChange={this.handleChange}.\n   // handleChange takes an event argument, i.e., a change in title, descripton,\n   // or checkbox.\n   handleChange = event => {\n     // An event has a target, thus, event.target gives us the event's DOM element, e.g.,\n     // <input name=\"description\" placeholder=\"Enter Todo description\" type=\"text\" class=\"form-control\" value=\"My Task\">.\n     // From that, we assign the variables name = \"description\" and value = \"My Task\".\n     let { name, value } = event.target;\n     // Recall the spread operator three dots ... , e.g.,\n     // var parts = ['two', 'three']; // [two\", \"three\"]\n     // var numbers = ['one', ...parts, 'four']; // [\"one\", \"two\", \"three\", \"four\"]\n     // ...this.state.activeItem spreads out the current task object, e.g.,\n     // {\"id\": 3, \"title\": \"My Task\", \"description\": \"Wash Dishes\", \"completed\": true}.\n     // [name]: value sets the name of the task to the new value the user entered\n     // (e.g., title to \"Another Task\" or description to \"Sweep floor\").\n     const activeItem = { ...this.state.activeItem, [name]: value };\n     // To change a value in the `state` object for rendering, use the `this.setState()`\n     // method. If you would not do so, the text shown to the user in the textbox, e.g.,\n     // for the title of the new task would not change.\n     this.setState({ activeItem });\n   };\n   // The `render()` method is the only required method in a class component.\n   // When called, it will render the page. You do not have to specifically\n   // call render() in your component. Rather, the stub code with the\n   // ReactDOM.render(...) in your index.js will do that for you.\n   // The following will render the modal for adding or editing a task.\n   render() {\n     // The modal has three properties: toggle, onSave, and activeItem.\n     // See App.js.\n     const { toggle, onSave } = this.props;\n     return (\n       <Modal isOpen={true} toggle={toggle}>\n         <ModalHeader toggle={toggle}> Artists Item </ModalHeader>\n         <ModalBody>\n           <Form>\n             <FormGroup>\n               <Label for=\"song\">Song</Label>\n               <Input\n                 type=\"text\"\n                 name=\"song\"\n                 value={this.state.activeItem.song}\n                 // \"this\" refers to the current event. If there is a change,\n                 // it will be passed to the handleChange function above.\n                 onChange={this.handleChange}\n                 placeholder=\"Enter Song Title\"\n               />\n             </FormGroup>\n             <FormGroup>\n               <Label for=\"artist\">Artist</Label>\n               <Input\n                 type=\"text\"\n                 name=\"artist\"\n                 value={this.state.activeItem.artist}\n                 onChange={this.handleChange}\n                 placeholder=\"Enter Artist\"\n               />\n             </FormGroup>\n             <FormGroup>\n               <Label for=\"album\">Album</Label>\n                 <Input\n                   type=\"text\"\n                   name=\"Album\"\n                   value={this.state.activeItem.album}\n                   onChange={this.handleChange}\n                   placeholder=\"Enter Album\"\n               />\n             </FormGroup>\n             <FormGroup>\n               <Label for=\"genre\">Genre</Label>\n                 <Input\n                   type=\"text\"\n                   name=\"Genre\"\n                   value={this.state.activeItem.genre}\n                   onChange={this.handleChange}\n                   placeholder=\"Enter Genre\"\n               />\n             </FormGroup>\n             <FormGroup>\n               <Label for=\"year\">Year</Label>\n                 <Input\n                   type=\"number\"\n                   name=\"year\"\n                   value={this.state.activeItem.year}\n                   onChange={this.handleChange}\n                   placeholder=\"Enter Year\"\n               />\n             </FormGroup>\n           </Form>\n         </ModalBody>\n         <ModalFooter>\n           <Button color=\"success\" onClick={() => onSave(this.state.activeItem)}>\n             Save\n           </Button>\n         </ModalFooter>\n       </Modal>\n     );\n   }\n }\n"]},"metadata":{},"sourceType":"module"}