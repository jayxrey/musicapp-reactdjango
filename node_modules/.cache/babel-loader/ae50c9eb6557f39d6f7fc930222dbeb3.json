{"ast":null,"code":"var _jsxFileName = \"/Users/jreyes/Desktop/musicapp/frontend/src/App.js\";\nimport React from \"react\";\nimport Modal from \"./components/Modal\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.refreshList = () => {\n      // We are using the axios library for making HTTP requests.\n      // Here is a GET request to our api/todos path.\n      // If it succeeds, we set the todoList to the resolved data.\n      // Otherwise, we catch the error and print it to the console.\n      // You can test these requests to your API using Postman.\n      // We are using async calls here. Refer to the JavaScript\n      // tutorial for how they work.\n      axios.get(\"http://localhost:8000/api/artistss/\").then(res => this.setState({\n        songList: res.data\n      })).catch(err => console.log(err));\n    };\n\n    this.renderItems = () => {\n      const newItems = this.state.songList.filter(item => item.year >= 0); // The items are then mapped to their UI elements based on their id, i.e.,\n      // item.id, item.description, and item.title.\n\n      return newItems.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item d-flex justify-content-between align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `song-title mr-2`,\n          title: item.song,\n          children: item.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.editItem(item),\n            className: \"btn btn-secondary mr-2\",\n            children: [\" \", \"Edit\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.handleDelete(item),\n            className: \"btn btn-danger\",\n            children: [\"Delete\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }, this));\n    };\n\n    this.toggle = () => {\n      // We have a modal view below in the render() function.\n      // Upon toggle, set the modal to false, i.e., do not show the modal.\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.handleSubmit = item => {\n      this.toggle(); // If the item already exists in our database, i.e., we have an id for our\n      // item, use a PUT request to modify it.\n\n      if (item.id) {\n        axios // Note that we are using backticks here instead of double quotes.\n        // Backticks are useful because they allow us to use dynamic variables,\n        // i.e., the item.id in this case. You can use this technique also\n        // for authentication tokens.\n        .put(`http://localhost:8000/api/artistss/${item.id}/`, item).then(res => this.refreshList());\n        return;\n      } // If the item does not yet exist, use a POST request to write to the\n      // database.\n\n\n      axios.post(\"http://localhost:8000/api/artistss/\", item).then(res => this.refreshList());\n    };\n\n    this.handleDelete = item => {\n      axios.delete(`http://localhost:8000/api/artistss/${item.id}`).then(res => this.refreshList());\n    };\n\n    this.createItem = () => {\n      const item = {\n        song: \"\",\n        artist: \"\",\n        album: \"\",\n        genre: \"\",\n        year: 0\n      };\n      this.setState({\n        activeItem: item,\n        modal: !this.state.modal\n      });\n    };\n\n    this.editItem = item => {\n      this.setState({\n        activeItem: item,\n        modal: !this.state.modal\n      });\n    };\n\n    this.state = {\n      activeItem: {\n        song: \"\",\n        artist: \"\",\n        album: \"\",\n        genre: \"\",\n        year: 0\n      },\n      songList: []\n    };\n  }\n\n  componentDidMount() {\n    this.refreshList();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-white text-uppercase text-center my-4\",\n        children: \"Music App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row \",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6 col-sm-10 mx-auto p-0\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card p-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: this.createItem,\n                className: \"btn btn-primary\",\n                children: \"Add Song\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"list-group list-group-flush\",\n              children: this.renderItems()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this), this.state.modal ? /*#__PURE__*/_jsxDEV(Modal, {\n        activeItem: this.state.activeItem,\n        toggle: this.toggle,\n        onSave: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jreyes/Desktop/musicapp/frontend/src/App.js"],"names":["React","Modal","axios","App","Component","constructor","props","refreshList","get","then","res","setState","songList","data","catch","err","console","log","renderItems","newItems","state","filter","item","year","map","song","title","editItem","handleDelete","id","toggle","modal","handleSubmit","put","post","delete","createItem","artist","album","genre","activeItem","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAkBjBC,WAlBiB,GAkBH,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,MAAAA,KAAK,CACFM,GADH,CACO,qCADP,EAEGC,IAFH,CAEQC,GAAG,IAAI,KAAKC,QAAL,CAAc;AAAEC,QAAAA,QAAQ,EAAEF,GAAG,CAACG;AAAhB,OAAd,CAFf,EAGGC,KAHH,CAGSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHhB;AAID,KA9BoB;;AAAA,SAiCrBG,WAjCqB,GAiCP,MAAM;AAClB,YAAMC,QAAQ,GAAG,KAAKC,KAAL,CAAWR,QAAX,CAAoBS,MAApB,CACbC,IAAI,IAAIA,IAAI,CAACC,IAAL,IAAa,CADR,CAAjB,CADkB,CAIlB;AACA;;AACA,aAAOJ,QAAQ,CAACK,GAAT,CAAaF,IAAI,iBACtB;AAEE,QAAA,SAAS,EAAC,mEAFZ;AAAA,gCAIE;AACE,UAAA,SAAS,EAAG,iBADd;AAEE,UAAA,KAAK,EAAEA,IAAI,CAACG,IAFd;AAAA,oBAIGH,IAAI,CAACI;AAJR;AAAA;AAAA;AAAA;AAAA,gBAJF,eAWE;AAAA,kCACE;AACE,YAAA,OAAO,EAAE,MAAM,KAAKC,QAAL,CAAcL,IAAd,CADjB;AAEE,YAAA,SAAS,EAAC,wBAFZ;AAAA,uBAIG,GAJH,UAKO,GALP;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAQE;AACE,YAAA,OAAO,EAAE,MAAM,KAAKM,YAAL,CAAkBN,IAAlB,CADjB;AAEE,YAAA,SAAS,EAAC,gBAFZ;AAAA,iCAIS,GAJT;AAAA;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA,SACOA,IAAI,CAACO,EADZ;AAAA;AAAA;AAAA;AAAA,cADK,CAAP;AA6BD,KApEoB;;AAAA,SAsErBC,MAtEqB,GAsEZ,MAAM;AACb;AACA;AACA,WAAKnB,QAAL,CAAc;AAAEoB,QAAAA,KAAK,EAAE,CAAC,KAAKX,KAAL,CAAWW;AAArB,OAAd;AACD,KA1EoB;;AAAA,SA2ErBC,YA3EqB,GA2ENV,IAAI,IAAI;AACrB,WAAKQ,MAAL,GADqB,CAErB;AACA;;AACA,UAAIR,IAAI,CAACO,EAAT,EAAa;AACX3B,QAAAA,KAAK,CACH;AACA;AACA;AACA;AAJG,SAKF+B,GALH,CAKQ,sCAAqCX,IAAI,CAACO,EAAG,GALrD,EAKyDP,IALzD,EAMGb,IANH,CAMQC,GAAG,IAAI,KAAKH,WAAL,EANf;AAOA;AACD,OAboB,CAcrB;AACA;;;AACAL,MAAAA,KAAK,CACFgC,IADH,CACQ,qCADR,EAC+CZ,IAD/C,EAEGb,IAFH,CAEQC,GAAG,IAAI,KAAKH,WAAL,EAFf;AAGD,KA9FoB;;AAAA,SAgGrBqB,YAhGqB,GAgGNN,IAAI,IAAI;AACrBpB,MAAAA,KAAK,CACFiC,MADH,CACW,sCAAqCb,IAAI,CAACO,EAAG,EADxD,EAEGpB,IAFH,CAEQC,GAAG,IAAI,KAAKH,WAAL,EAFf;AAGD,KApGoB;;AAAA,SAsGrB6B,UAtGqB,GAsGR,MAAM;AACjB,YAAMd,IAAI,GAAG;AAAEG,QAAAA,IAAI,EAAE,EAAR;AAAYY,QAAAA,MAAM,EAAE,EAApB;AAAwBC,QAAAA,KAAK,EAAE,EAA/B;AAAmCC,QAAAA,KAAK,EAAE,EAA1C;AAA8ChB,QAAAA,IAAI,EAAE;AAApD,OAAb;AACA,WAAKZ,QAAL,CAAc;AAAE6B,QAAAA,UAAU,EAAElB,IAAd;AAAoBS,QAAAA,KAAK,EAAE,CAAC,KAAKX,KAAL,CAAWW;AAAvC,OAAd;AACD,KAzGoB;;AAAA,SA2GrBJ,QA3GqB,GA2GVL,IAAI,IAAI;AACf,WAAKX,QAAL,CAAc;AAAE6B,QAAAA,UAAU,EAAElB,IAAd;AAAoBS,QAAAA,KAAK,EAAE,CAAC,KAAKX,KAAL,CAAWW;AAAvC,OAAd;AACD,KA7GkB;;AAEjB,SAAKX,KAAL,GAAa;AACXoB,MAAAA,UAAU,EAAE;AACVf,QAAAA,IAAI,EAAE,EADI;AAEVY,QAAAA,MAAM,EAAE,EAFE;AAGVC,QAAAA,KAAK,EAAE,EAHG;AAIVC,QAAAA,KAAK,EAAE,EAJG;AAKVhB,QAAAA,IAAI,EAAE;AALI,OADD;AAQXX,MAAAA,QAAQ,EAAE;AARC,KAAb;AAUD;;AAED6B,EAAAA,iBAAiB,GAAG;AAChB,SAAKlC,WAAL;AACD;;AA+FHmC,EAAAA,MAAM,GAAG;AACL,wBACE;AAAM,MAAA,SAAS,EAAC,SAAhB;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,4CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,gCAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,oCACE;AAAK,cAAA,SAAS,EAAC,EAAf;AAAA,qCACE;AAAQ,gBAAA,OAAO,EAAE,KAAKN,UAAtB;AAAkC,gBAAA,SAAS,EAAC,iBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADF,eAME;AAAI,cAAA,SAAS,EAAC,6BAAd;AAAA,wBACG,KAAKlB,WAAL;AADH;AAAA;AAAA;AAAA;AAAA,oBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF,EAiBG,KAAKE,KAAL,CAAWW,KAAX,gBACC,QAAC,KAAD;AACE,QAAA,UAAU,EAAE,KAAKX,KAAL,CAAWoB,UADzB;AAEE,QAAA,MAAM,EAAE,KAAKV,MAFf;AAGE,QAAA,MAAM,EAAE,KAAKE;AAHf;AAAA;AAAA;AAAA;AAAA,cADD,GAMG,IAvBN;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA2BD;;AA5I6B;;AAgJlC,eAAe7B,GAAf","sourcesContent":["import React from \"react\";\nimport Modal from \"./components/Modal\";\nimport axios from \"axios\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeItem: {\n        song: \"\",\n        artist: \"\",\n        album: \"\",\n        genre: \"\",\n        year: 0\n      },\n      songList: []\n    };\n  }\n\n  componentDidMount() {\n      this.refreshList();\n    }\n\n    refreshList = () => {\n  // We are using the axios library for making HTTP requests.\n  // Here is a GET request to our api/todos path.\n  // If it succeeds, we set the todoList to the resolved data.\n  // Otherwise, we catch the error and print it to the console.\n  // You can test these requests to your API using Postman.\n  // We are using async calls here. Refer to the JavaScript\n  // tutorial for how they work.\n  axios\n    .get(\"http://localhost:8000/api/artistss/\")\n    .then(res => this.setState({ songList: res.data }))\n    .catch(err => console.log(err));\n};\n\n// Function for managing the edit and delete views.\nrenderItems = () => {\n  const newItems = this.state.songList.filter(\n      item => item.year >= 0\n    );\n  // The items are then mapped to their UI elements based on their id, i.e.,\n  // item.id, item.description, and item.title.\n  return newItems.map(item => (\n    <li\n      key={item.id}\n      className=\"list-group-item d-flex justify-content-between align-items-center\"\n    >\n      <span\n        className={`song-title mr-2`}\n        title={item.song}\n      >\n        {item.title}\n      </span>\n      {/* UI for editing and deleting items and their respective events. */}\n      <span>\n        <button\n          onClick={() => this.editItem(item)}\n          className=\"btn btn-secondary mr-2\"\n        >\n          {\" \"}\n          Edit{\" \"}\n        </button>\n        <button\n          onClick={() => this.handleDelete(item)}\n          className=\"btn btn-danger\"\n        >\n          Delete{\" \"}\n        </button>\n      </span>\n    </li>\n  ));\n};\n\ntoggle = () => {\n  // We have a modal view below in the render() function.\n  // Upon toggle, set the modal to false, i.e., do not show the modal.\n  this.setState({ modal: !this.state.modal });\n};\nhandleSubmit = item => {\n  this.toggle();\n  // If the item already exists in our database, i.e., we have an id for our\n  // item, use a PUT request to modify it.\n  if (item.id) {\n    axios\n      // Note that we are using backticks here instead of double quotes.\n      // Backticks are useful because they allow us to use dynamic variables,\n      // i.e., the item.id in this case. You can use this technique also\n      // for authentication tokens.\n      .put(`http://localhost:8000/api/artistss/${item.id}/`, item)\n      .then(res => this.refreshList());\n    return;\n  }\n  // If the item does not yet exist, use a POST request to write to the\n  // database.\n  axios\n    .post(\"http://localhost:8000/api/artistss/\", item)\n    .then(res => this.refreshList());\n};\n// If the user triggers a delete event, send a delete request.\nhandleDelete = item => {\n  axios\n    .delete(`http://localhost:8000/api/artistss/${item.id}`)\n    .then(res => this.refreshList());\n};\n\ncreateItem = () => {\n  const item = { song: \"\", artist: \"\", album: \"\", genre: \"\", year: 0 };\n  this.setState({ activeItem: item, modal: !this.state.modal });\n};\n\neditItem = item => {\n    this.setState({ activeItem: item, modal: !this.state.modal });\n  };\n\n  render() {\n      return (\n        <main className=\"content\">\n          <h1 className=\"text-white text-uppercase text-center my-4\">Music App</h1>\n          <div className=\"row \">\n            <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\n              <div className=\"card p-3\">\n                <div className=\"\">\n                  <button onClick={this.createItem} className=\"btn btn-primary\">\n                    Add Song\n                  </button>\n                </div>\n                <ul className=\"list-group list-group-flush\">\n                  {this.renderItems()}\n                </ul>\n              </div>\n            </div>\n          </div>\n          {/* If the modal state is true, show the modal component. */}\n          {this.state.modal ? (\n            <Modal\n              activeItem={this.state.activeItem}\n              toggle={this.toggle}\n              onSave={this.handleSubmit}\n            />\n          ) : null}\n        </main>\n      );\n    }\n  }\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}